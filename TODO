Roadmap (tasks listed in decreasing priority)

* Make error/warning know which rule has caused them
* Allow adding custom rules (by specifying additional Rule directories)
* Make phpca configurable (see sample phpca.ini for a collection of ideas)
* Add XML output to comply with phpcs for ci integration
* Port "interesting" rules from phpcs
* write a source code highlighter that highlights violations in the source code and attaches the error message as popup
* write output statistics that aggregate how often each rule has been violated (these are the rules you must teach the developers)

Rules to add (in no particular order, just a collection of ideas)

* disallow PHP 4 style constructors (T)
* no shutup operator (T)
* No inline if (T)
* Correct indentation
* no trailing whitespace (T)
* no elseif (warning?) (T)
* no brackets around return value
* no deprecated PHPDoc tags (@access, ...)
* one blank after comma in argument lists
* consistently use echo or print -> no echo or print statements
* no output (echo, print) in certain classes/directories
* test method has @covers tag
* all thrown exceptions are documented in docblocks
* all parameters are documented in docblocks
* there is a @return in every docblock, @return void or @return null
* type hints and docblock parameter types match
* test method must either have at least one assertion or @expects annotation
* disallow variable variables (T)
* disallow ereg + split
* disallow access superglobals rule
* disablow write to superglobals
* no var_dump, no print_r
* call-time references (?)
* FIX: make sure do ... while closing brace is at correct level
* FIX: ${ token opens block level